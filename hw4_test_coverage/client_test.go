package main

import (
	"encoding/xml"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"testing"
)

// Generated by https://www.onlinetool.io/xmltogo/
type Root struct {
	Users []struct {
		Id string `xml:"id"`
		//Guid          string `xml:"guid"`
		//IsActive      string `xml:"isActive"`
		//Balance       string `xml:"balance"`
		//Picture       string `xml:"picture"`
		Age string `xml:"age"`
		//EyeColor      string `xml:"eyeColor"`
		FirstName string `xml:"first_name"`
		LastName  string `xml:"last_name"`
		Gender    string `xml:"gender"`
		//Company       string `xml:"company"`
		//Email         string `xml:"email"`
		//Phone         string `xml:"phone"`
		//Address       string `xml:"address"`
		About string `xml:"about"`
		//Registered    string `xml:"registered"`
		//FavoriteFruit string `xml:"favoriteFruit"`
	} `xml:"row"`
}

// код писать тут
func SearchServer(w http.ResponseWriter, r *http.Request) {
	if r.Header.Get("AccessToken") != "hello" {
		http.Error(w, "bye", http.StatusUnauthorized)
		return
	}

	if r.Header.Get("AccessToken") != "coursera" {
		http.Error(w, "", http.StatusUnauthorized)
		return
	}

	// Get limit
	param := r.URL.Query().Get("limit")
	if param == "" {
		http.Error(w, "Parameter limit is empty or not found", http.StatusInternalServerError)
		return
	}
	limit, err := strconv.Atoi(param)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// Get offset
	param = r.URL.Query().Get("offset")
	if param == "" {
		http.Error(w, "Parameter offset is empty or not found", http.StatusInternalServerError)
		return
	}
	offset, err := strconv.Atoi(param)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// Get order_by
	param = r.URL.Query().Get("order_by")
	if param == "" {
		http.Error(w, "Parameter order_by is empty or not found", http.StatusInternalServerError)
		return
	}
	orderBy, err := strconv.Atoi(param)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// Get query
	query := r.URL.Query().Get("query")
	if query == "" {
		http.Error(w, "Parameter query is empty or not found", http.StatusInternalServerError)
		return
	}

	// Get order_field
	orderField := r.URL.Query().Get("order_field")
	if orderField == "" {
		orderField = "Name"
	}

	data, err := ioutil.ReadFile("./dataset.xml")
	if err != nil {
		panic(err.Error())
	}
	users := Root{}
	err = xml.Unmarshal(data, &users)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	found := make([]User, 0, 100)
	for _, row := range users.Row {
		if !(strings.Contains(row.Name(), query) || strings.Contains(row.About, query)) {
			continue
		}

		users = append(users, row.toUser())
	}
}

func TestSearchClient_FindUsers(t *testing.T) {
	SearchServer()
}
